"""License management endpoints"""
import logging
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import List

from app.core.database import get_db
from app.middleware.auth import get_current_user

logger = logging.getLogger(__name__)
router = APIRouter()


class LicenseResponse(BaseModel):
    key: str
    createdAt: str
    revoked: bool


class GenerateLicenseResponse(BaseModel):
    key: str
    message: str


class ListLicensesResponse(BaseModel):
    licenses: List[LicenseResponse]


class RevokeLicenseResponse(BaseModel):
    message: str


@router.post("/generate", response_model=GenerateLicenseResponse)
async def generate_license(user=Depends(get_current_user)):
    """Generate a new license key for the current user"""
    db = get_db()
    
    try:
        # Create new license key (UUID is auto-generated by DB)
        license_key = await db.licensekey.create(
            data={
                "userId": user.id,
            }
        )
        
        logger.info(f"License key generated for user: {user.email}")
        
        return GenerateLicenseResponse(
            key=license_key.key,
            message="License key generated successfully"
        )
        
    except Exception as e:
        logger.error(f"Failed to generate license key: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to generate license key")


@router.get("/list", response_model=ListLicensesResponse)
async def list_licenses(user=Depends(get_current_user)):
    """List all license keys for the current user"""
    db = get_db()
    
    try:
        # Get all license keys for the user
        licenses = await db.licensekey.find_many(
            where={"userId": user.id},
            order={"createdAt": "desc"}
        )
        
        return ListLicensesResponse(
            licenses=[
                LicenseResponse(
                    key=license.key,
                    createdAt=license.createdAt.isoformat(),
                    revoked=license.revoked
                )
                for license in licenses
            ]
        )
        
    except Exception as e:
        logger.error(f"Failed to list license keys: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to list license keys")


@router.delete("/{key}", response_model=RevokeLicenseResponse)
async def revoke_license(key: str, user=Depends(get_current_user)):
    """Revoke a license key"""
    db = get_db()
    
    try:
        # Find the license key
        license_key = await db.licensekey.find_first(
            where={
                "key": key,
                "userId": user.id
            }
        )
        
        if not license_key:
            raise HTTPException(status_code=404, detail="License key not found")
        
        if license_key.revoked:
            raise HTTPException(status_code=400, detail="License key already revoked")
        
        # Revoke the license key
        await db.licensekey.update(
            where={"key": key},
            data={"revoked": True}
        )
        
        logger.info(f"License key revoked: {key}")
        
        return RevokeLicenseResponse(message="License key revoked successfully")
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to revoke license key: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="Failed to revoke license key")
