/**
 * Centralized diagram definitions for the AI File Management System
 * This file is auto-generated from mermaid/*.mmd files
 * 
 * To regenerate, run: node diagrams/generate-definitions.js
 */

interface DiagramDefinition {
  title: string;
  description: string;
  mermaid: string;
}

export const diagramDefinitions: DiagramDefinition[] = [
  {
    "title": "Class Diagram",
    "description": "Shows the static structure of the system with classes, attributes, methods, and relationships.",
    "mermaid": "classDiagram\r\n    %% Core Application Classes\r\n    class FastAPIApp {\r\n        +app: FastAPI\r\n        +lifespan()\r\n        +root()\r\n        +health_check()\r\n        +websocket_endpoint()\r\n    }\r\n\r\n    class WebSocketManager {\r\n        -connections: Dict[str, List[WebSocket]]\r\n        -session_connections: Dict[str, List[WebSocket]]\r\n        +connect(websocket, session_id)\r\n        +disconnect(websocket, session_id)\r\n        +send_personal_message(message, websocket)\r\n        +broadcast_scan_progress(session_id, data)\r\n        +broadcast_cleanup_status(cleanup_id, data)\r\n        +get_session_connections(session_id)\r\n        +cleanup_empty_sessions()\r\n    }\r\n\r\n    %% Database Models\r\n    class File {\r\n        +id: UUID\r\n        +path: str\r\n        +name: str\r\n        +size: int\r\n        +file_type: str\r\n        +category: str\r\n        +hash_md5: str\r\n        +hash_sha256: str\r\n        +perceptual_hash: str\r\n        +content_hash: str\r\n        +confidence_score: float\r\n        +is_duplicate: str\r\n        +scan_session_id: UUID\r\n        +created_at: datetime\r\n        +modified_at: datetime\r\n        +scanned_at: datetime\r\n        +to_dict()\r\n    }\r\n\r\n    class Duplicate {\r\n        +id: UUID\r\n        +file_id: UUID\r\n        +duplicate_file_id: UUID\r\n        +duplicate_group_id: UUID\r\n        +similarity_score: float\r\n        +detection_method: str\r\n        +is_primary: str\r\n        +created_at: datetime\r\n        +to_dict()\r\n    }\r\n\r\n    class ScanSession {\r\n        +id: UUID\r\n        +directory_path: str\r\n        +status: str\r\n        +files_processed: int\r\n        +files_total: int\r\n        +duplicates_found: int\r\n        +errors_count: int\r\n        +progress_percentage: float\r\n        +started_at: datetime\r\n        +completed_at: datetime\r\n        +error_message: str\r\n        +update_progress(files_processed, files_total, duplicates_found)\r\n        +mark_completed()\r\n        +mark_failed(error_message)\r\n        +to_dict()\r\n    }\r\n\r\n    %% Service Classes\r\n    class ScannerService {\r\n        +classifier: SimpleClassifier\r\n        +duplicate_detector: DuplicateDetector\r\n        +supported_extensions: set\r\n        +scan_directory(session_id, directory_path, db)\r\n        +_get_files_recursive(directory_path)\r\n        +_is_supported_file(file_path)\r\n        +_process_file(file_path, session_id, db)\r\n        +_get_existing_file(file_path, db)\r\n        +_calculate_hash(file_path, algorithm)\r\n        +_detect_all_duplicates(processed_files, db)\r\n        +_update_session_status(session_id, status, db)\r\n        +_update_session_progress(session_id, files_processed, files_total, duplicates_found, progress, db)\r\n        +_update_session_files_total(session_id, total_files, db)\r\n    }\r\n\r\n    class DuplicateService {\r\n        +similarity_threshold: float\r\n        +get_duplicate_groups(db, session_id, limit, offset)\r\n        +get_duplicate_stats(db, session_id)\r\n        +detect_duplicates_for_file(file_id, db)\r\n        +_create_duplicate_group(group_id, duplicates, db)\r\n        +_find_hash_duplicates(file, db)\r\n        +_find_perceptual_duplicates(file, db)\r\n        +_find_content_duplicates(file, db)\r\n        +_file_to_info(file)\r\n    }\r\n\r\n    class CleanupService {\r\n        +trash_dir: str\r\n        +archive_dir: str\r\n        +execute_cleanup(cleanup_id, request, db)\r\n        +_delete_duplicates(rule, db)\r\n        +_move_to_trash(rule, db)\r\n        +_archive_old_files(rule, db)\r\n        +_organize_by_type(rule, db)\r\n        +_delete_file(file_id, db)\r\n        +_ensure_directories()\r\n    }\r\n\r\n    %% ML Model Classes\r\n    class SimpleClassifier {\r\n        +categories: dict\r\n        +classify_file(file_path)\r\n        +get_file_info(file_path)\r\n        +_classify_by_mime_type(mime_type)\r\n    }\r\n\r\n    class DuplicateDetector {\r\n        +find_duplicates(file_paths)\r\n        +_calculate_file_hash(file_path)\r\n        +_compare_files(file1, file2)\r\n    }\r\n\r\n    %% API Routes (Unified)\r\n    class APIRoutes {\r\n        +scanner_service: ScannerService\r\n        +duplicate_service: DuplicateService\r\n        +cleanup_service: CleanupService\r\n        +start_scan(request, background_tasks, db)\r\n        +get_scan_status(session_id, db)\r\n        +get_scan_sessions(limit, offset, db)\r\n        +get_duplicates(session_id, limit, offset, db)\r\n        +get_duplicate_stats(session_id, db)\r\n        +execute_cleanup(request, background_tasks, db)\r\n        +get_cleanup_status(cleanup_id)\r\n        +get_scan_history(db)\r\n        +get_scan_by_id(scan_id, db)\r\n        +delete_scan(scan_id, db)\r\n        +delete_multiple_scans(request, db)\r\n    }\r\n\r\n    %% Frontend Components\r\n    class App {\r\n        +theme: Theme\r\n        +Navigation()\r\n        +Routes()\r\n    }\r\n\r\n    class Dashboard {\r\n        +scanHistory: array\r\n        +loading: boolean\r\n        +error: string\r\n        +loadScanHistory()\r\n        +handleScanSelect(scanId)\r\n    }\r\n\r\n    class NewScanPage {\r\n        +directoryPath: string\r\n        +scanning: boolean\r\n        +handleScanStart()\r\n        +handleDirectorySelect()\r\n    }\r\n\r\n    class ScanDetailPage {\r\n        +scanId: string\r\n        +scanData: object\r\n        +duplicates: array\r\n        +stats: object\r\n        +loadScanDetails()\r\n    }\r\n\r\n    class ScanHistoryPanel {\r\n        +scanHistory: array\r\n        +onScanSelect: function\r\n        +onRefresh: function\r\n        +onScanDeleted: function\r\n        +onMultipleScansDeleted: function\r\n        +loading: boolean\r\n        +deleteDialogOpen: boolean\r\n        +bulkSelectMode: boolean\r\n        +selectedScans: Set\r\n        +handleDeleteClick(scanId, event)\r\n        +handleDeleteConfirm()\r\n        +handleBulkDelete()\r\n        +handleSelectAll()\r\n        +render()\r\n    }\r\n\r\n    class DuplicatePanel {\r\n        +duplicates: array\r\n        +onRefresh: function\r\n        +render()\r\n    }\r\n\r\n    class CleanupPanel {\r\n        +onCleanup: function\r\n        +duplicates: array\r\n        +loading: boolean\r\n        +render()\r\n    }\r\n\r\n    class StatsPanel {\r\n        +stats: object\r\n        +render()\r\n    }\r\n\r\n    class UMLDiagrams {\r\n        +value: number\r\n        +loading: boolean\r\n        +error: string\r\n        +exportAnchorEl: HTMLElement\r\n        +isExporting: boolean\r\n        +diagrams: array\r\n        +renderDiagrams()\r\n        +handleExportAs(format)\r\n        +handleExportClick()\r\n    }\r\n\r\n    %% Utility Classes\r\n    class ApiService {\r\n        +baseURL: string\r\n        +healthCheck()\r\n        +startScan(directoryPath)\r\n        +getScanStatus(sessionId)\r\n        +getDuplicates(sessionId, limit, offset)\r\n        +getDuplicateStats(sessionId)\r\n        +executeCleanup(cleanupRules)\r\n        +getScanHistory()\r\n        +getScanById(scanId)\r\n        +deleteScan(scanId)\r\n        +deleteMultipleScans(scanIds)\r\n    }\r\n\r\n    class WebSocketHook {\r\n        +socket: WebSocket\r\n        +isConnected: boolean\r\n        +lastMessage: object\r\n        +connect(sessionId)\r\n        +disconnect()\r\n        +sendMessage(message)\r\n    }\r\n\r\n    class WebSocketSingleton {\r\n        -connections: Map[str, WebSocket]\r\n        -callbacks: Map[str, Set[function]]\r\n        -connectionPromises: Map[str, Promise]\r\n        +getConnection(sessionId, baseUrl)\r\n        +addCallback(sessionId, callback)\r\n        +removeCallback(sessionId, callback)\r\n        +getExistingConnection(sessionId)\r\n        +closeAll()\r\n    }\r\n\r\n    class ExportUtils {\r\n        +exportAsImage(element, options)\r\n        +exportAsPDF(element, options)\r\n        +getDiagramTitle(diagrams, index)\r\n        +sanitizeFilename(filename)\r\n    }\r\n\r\n    %% Relationships\r\n    FastAPIApp --> WebSocketManager\r\n    FastAPIApp --> APIRoutes\r\n\r\n    APIRoutes --> ScannerService\r\n    APIRoutes --> DuplicateService\r\n    APIRoutes --> CleanupService\r\n\r\n    ScannerService --> File\r\n    ScannerService --> ScanSession\r\n    ScannerService --> SimpleClassifier\r\n    ScannerService --> DuplicateDetector\r\n\r\n    DuplicateService --> File\r\n    DuplicateService --> Duplicate\r\n\r\n    CleanupService --> File\r\n    CleanupService --> Duplicate\r\n\r\n    SimpleClassifier --> File\r\n    DuplicateDetector --> File\r\n\r\n    App --> Dashboard\r\n    App --> NewScanPage\r\n    App --> ScanDetailPage\r\n    App --> UMLDiagrams\r\n\r\n    Dashboard --> ScanHistoryPanel\r\n    ScanDetailPage --> DuplicatePanel\r\n    ScanDetailPage --> CleanupPanel\r\n    ScanDetailPage --> StatsPanel\r\n\r\n    NewScanPage --> ApiService\r\n    ScanDetailPage --> ApiService\r\n    Dashboard --> ApiService\r\n\r\n    NewScanPage --> WebSocketHook\r\n    ScanDetailPage --> WebSocketHook\r\n\r\n    WebSocketHook --> WebSocketSingleton\r\n    UMLDiagrams --> ExportUtils\r\n\r\n    %% Database Relationships\r\n    File --> ScanSession\r\n    Duplicate --> File"
  },
  {
    "title": "Activity Diagram",
    "description": "Shows the workflow and decision points in the scan and cleanup processes.",
    "mermaid": "flowchart TD\r\n    A[User Opens Application] --> B[Load Dashboard]\r\n    B --> C[User Enters Directory Path]\r\n    C --> D[User Clicks Start Scan]\r\n    D --> E[Validate Directory Path]\r\n    E --> F{Directory Valid?}\r\n    F -->|No| G[Show Error Message]\r\n    G --> C\r\n    F -->|Yes| H[Create Scan Session]\r\n    H --> I[Initialize File Service]\r\n    I --> J[Start Background Scan Process]\r\n    J --> K[Update Status to Running]\r\n    K --> L[Scan Directory Recursively]\r\n    L --> M[Process Each File]\r\n    M --> N{File Already Exists?}\r\n    N -->|Yes| O[Update scan_session_id]\r\n    N -->|No| P[Calculate File Hash]\r\n    O --> Q[Classify File Type]\r\n    P --> Q\r\n    Q --> R[Extract File Metadata]\r\n    R --> S[Store/Update File in Database]\r\n    S --> T[Update Progress 0-50%]\r\n    T --> U{More Files?}\r\n    U -->|Yes| M\r\n    U -->|No| V[Send Progress Update 50%]\r\n    V --> W[Run Duplicate Detection]\r\n    W --> X[Compare File Hashes]\r\n    X --> Y[Group Similar Files]\r\n    Y --> Z[Calculate Similarity Scores]\r\n    Z --> AA[Create Duplicate Groups]\r\n    AA --> BB[Update Progress 75%]\r\n    BB --> CC[Update Scan Status to Completed]\r\n    CC --> DD[Update Progress 100%]\r\n    DD --> EE[Send WebSocket Update]\r\n    EE --> FF[Display Results in UI]\r\n    FF --> GG[User Reviews Duplicates]\r\n    GG --> HH{User Wants Cleanup?}\r\n    HH -->|No| II[End Process]\r\n    HH -->|Yes| JJ[User Selects Cleanup Rules]\r\n    JJ --> KK[Preview Cleanup Actions]\r\n    KK --> LL{User Confirms?}\r\n    LL -->|No| JJ\r\n    LL -->|Yes| MM[Execute Cleanup]\r\n    MM --> NN[Move Files to Backup]\r\n    NN --> OO[Delete Duplicate Files]\r\n    OO --> PP[Update Database]\r\n    PP --> QQ[Send Cleanup Complete Notification]\r\n    QQ --> RR[Refresh UI with Results]\r\n    RR --> II\r\n\r\n    %% Scan History Management\r\n    FF --> SS{User Wants to Delete Scan?}\r\n    SS -->|Yes| TT[User Clicks Delete]\r\n    TT --> UU[Show Confirmation Dialog]\r\n    UU --> VV{User Confirms?}\r\n    VV -->|No| FF\r\n    VV -->|Yes| WW[Delete Scan from Database]\r\n    WW --> XX[Delete Associated Files and Duplicates]\r\n    XX --> YY[Refresh Scan History]\r\n    YY --> FF\r\n\r\n    FF --> ZZ{User Wants Bulk Delete?}\r\n    ZZ -->|Yes| AAA[Enter Bulk Select Mode]\r\n    AAA --> BBB[User Selects Multiple Scans]\r\n    BBB --> CCC[User Clicks Bulk Delete]\r\n    CCC --> DDD[Show Bulk Confirmation Dialog]\r\n    DDD --> EEE{User Confirms?}\r\n    EEE -->|No| AAA\r\n    EEE -->|Yes| FFF[Delete Multiple Scans]\r\n    FFF --> GGG[Delete All Associated Data]\r\n    GGG --> HHH[Refresh Scan History]\r\n    HHH --> FF\r\n\r\n    %% Parallel Processes\r\n    J --> LLL[WebSocket Connection]\r\n    LLL --> MMM[Send Real-time Updates]\r\n    MMM --> NNN{Scan Active?}\r\n    NNN -->|Yes| OOO[Send Progress Update]\r\n    OOO --> MMM\r\n    NNN -->|No| PPP[Close WebSocket]\r\n\r\n    %% Error Handling\r\n    J --> QQQ{Error Occurs?}\r\n    QQQ -->|Yes| RRR[Log Error]\r\n    RRR --> SSS[Update Scan Status to Failed]\r\n    SSS --> TTT[Send Error Notification]\r\n    TTT --> UUU[Display Error in UI]\r\n    UUU --> II"
  },
  {
    "title": "Component Diagram",
    "description": "Shows the system components and their relationships.",
    "mermaid": "graph TB\r\n    %% External Systems\r\n    subgraph \"External Systems\"\r\n        User[User Browser]\r\n        FileSystem[File System]\r\n        Docker[Docker Engine]\r\n    end\r\n\r\n    %% Frontend Layer\r\n    subgraph \"Frontend Layer\"\r\n        ReactApp[React Application]\r\n        MaterialUI[Material-UI Components]\r\n        WebSocketClient[WebSocket Client]\r\n        ApiClient[API Client]\r\n    end\r\n\r\n    %% API Gateway Layer\r\n    subgraph \"API Gateway Layer\"\r\n        Nginx[Nginx Reverse Proxy]\r\n        FastAPI[FastAPI Application]\r\n        CORS[CORS Middleware]\r\n    end\r\n\r\n    %% Business Logic Layer\r\n    subgraph \"Business Logic Layer\"\r\n        ScanService[Scan Service]\r\n        DuplicateService[Duplicate Service]\r\n        CleanupService[Cleanup Service]\r\n        FileService[File Service]\r\n        MLService[ML Model Service]\r\n    end\r\n\r\n    %% ML Models Layer\r\n    subgraph \"ML Models Layer\"\r\n        TextClassifier[DistilBERT Text Classifier]\r\n        ImageClassifier[CNN Image Classifier]\r\n        OCRProcessor[EasyOCR Processor]\r\n        HashCalculator[Hash Calculator]\r\n    end\r\n\r\n    %% Data Access Layer\r\n    subgraph \"Data Access Layer\"\r\n        Database[PostgreSQL Database]\r\n        Redis[Redis Cache]\r\n        FileStorage[File Storage]\r\n    end\r\n\r\n    %% WebSocket Layer\r\n    subgraph \"WebSocket Layer\"\r\n        WebSocketManager[WebSocket Manager]\r\n        MessageBroker[Message Broker]\r\n    end\r\n\r\n    %% Container Layer\r\n    subgraph \"Container Layer\"\r\n        FrontendContainer[Frontend Container]\r\n        BackendContainer[Backend Container]\r\n        DatabaseContainer[Database Container]\r\n        RedisContainer[Redis Container]\r\n    end\r\n\r\n    %% Connections\r\n    User --> Nginx\r\n    Nginx --> FastAPI\r\n    FastAPI --> CORS\r\n    CORS --> ScanService\r\n    CORS --> DuplicateService\r\n    CORS --> CleanupService\r\n\r\n    ScanService --> FileService\r\n    DuplicateService --> FileService\r\n    CleanupService --> DuplicateService\r\n\r\n    FileService --> MLService\r\n    FileService --> FileSystem\r\n    FileService --> Database\r\n\r\n    MLService --> TextClassifier\r\n    MLService --> ImageClassifier\r\n    MLService --> OCRProcessor\r\n    MLService --> HashCalculator\r\n\r\n    DuplicateService --> Database\r\n    CleanupService --> Database\r\n    CleanupService --> FileSystem\r\n\r\n    FastAPI --> WebSocketManager\r\n    WebSocketManager --> MessageBroker\r\n    MessageBroker --> WebSocketClient\r\n\r\n    ReactApp --> MaterialUI\r\n    ReactApp --> WebSocketClient\r\n    ReactApp --> ApiClient\r\n    ApiClient --> FastAPI\r\n\r\n    Database --> DatabaseContainer\r\n    Redis --> RedisContainer\r\n    FastAPI --> BackendContainer\r\n    ReactApp --> FrontendContainer\r\n\r\n    Docker --> FrontendContainer\r\n    Docker --> BackendContainer\r\n    Docker --> DatabaseContainer\r\n    Docker --> RedisContainer"
  },
  {
    "title": "Deployment Diagram",
    "description": "Shows the deployment architecture and infrastructure components.",
    "mermaid": "graph TB\r\n    %% Physical Infrastructure\r\n    subgraph \"Production Server\"\r\n        subgraph \"Docker Host\"\r\n            subgraph \"Frontend Container\"\r\n                ReactApp[React Application<br/>Port: 3000]\r\n                NginxFrontend[Nginx<br/>Port: 80/443]\r\n            end\r\n            \r\n            subgraph \"Backend Container\"\r\n                FastAPI[FastAPI Application<br/>Port: 8000]\r\n                MLModels[ML Models<br/>DistilBERT, CNN, EasyOCR]\r\n            end\r\n            \r\n            subgraph \"Database Container\"\r\n                PostgreSQL[PostgreSQL Database<br/>Port: 5432]\r\n                Redis[Redis Cache<br/>Port: 6379]\r\n            end\r\n            \r\n            subgraph \"Monitoring Container\"\r\n                Prometheus[Prometheus<br/>Port: 9090]\r\n                Grafana[Grafana<br/>Port: 3001]\r\n            end\r\n        end\r\n        \r\n        subgraph \"File System\"\r\n            DataVolume[Data Volume<br/>/var/lib/postgresql/data]\r\n            MLModelVolume[ML Model Volume<br/>/app/ml_models]\r\n            LogVolume[Log Volume<br/>/app/logs]\r\n        end\r\n    end\r\n\r\n    %% External Connections\r\n    subgraph \"External Systems\"\r\n        User[User Browser]\r\n        CDN[CDN/Static Assets]\r\n        DockerRegistry[Docker Registry]\r\n    end\r\n\r\n    %% Network Connections\r\n    User -->|HTTPS| NginxFrontend\r\n    NginxFrontend -->|HTTP| ReactApp\r\n    NginxFrontend -->|HTTP| FastAPI\r\n    \r\n    FastAPI -->|SQL| PostgreSQL\r\n    FastAPI -->|Redis Protocol| Redis\r\n    FastAPI -->|File I/O| DataVolume\r\n    FastAPI -->|Model Access| MLModelVolume\r\n    \r\n    MLModels -->|Model Files| MLModelVolume\r\n    MLModels -->|Logs| LogVolume\r\n    \r\n    PostgreSQL -->|Data Files| DataVolume\r\n    Redis -->|Cache Files| DataVolume\r\n    \r\n    Prometheus -->|Metrics| FastAPI\r\n    Prometheus -->|Metrics| PostgreSQL\r\n    Prometheus -->|Metrics| Redis\r\n    Grafana -->|Dashboard| Prometheus\r\n    \r\n    DockerRegistry -->|Pull Images| Docker Host\r\n    CDN -->|Static Assets| User\r\n\r\n    %% Container Orchestration\r\n    subgraph \"Docker Compose\"\r\n        ComposeFile[docker-compose.yml]\r\n        ComposeFile --> FrontendContainer\r\n        ComposeFile --> BackendContainer\r\n        ComposeFile --> DatabaseContainer\r\n        ComposeFile --> MonitoringContainer\r\n    end"
  },
  {
    "title": "Use Case Diagram",
    "description": "Shows the interactions between users and the system use cases.",
    "mermaid": "graph TB\r\n    %% Actors\r\n    User[User]\r\n    Admin[System Administrator]\r\n    MLSystem[ML System]\r\n    FileSystem[File System]\r\n\r\n    %% System Boundary\r\n    subgraph \"AI File Management System\"\r\n        %% Core Use Cases\r\n        UC1[Scan Directory]\r\n        UC2[View Scan Results]\r\n        UC3[Detect Duplicates]\r\n        UC4[View Duplicate Groups]\r\n        UC5[Execute Cleanup]\r\n        UC6[Preview Cleanup]\r\n        UC7[Monitor Progress]\r\n        UC8[View Statistics]\r\n        \r\n        %% File Management Use Cases\r\n        UC9[Classify Files]\r\n        UC10[Extract File Metadata]\r\n        UC11[Calculate File Hashes]\r\n        UC12[Compare File Similarity]\r\n        \r\n        %% System Management Use Cases\r\n        UC13[Manage Scan Sessions]\r\n        UC14[Configure Cleanup Rules]\r\n        UC15[Backup Files]\r\n        UC16[Restore Files]\r\n        UC17[View System Health]\r\n        UC18[Manage ML Models]\r\n        \r\n        %% Advanced Use Cases\r\n        UC19[Schedule Scans]\r\n        UC20[Export Reports]\r\n        UC21[Configure Notifications]\r\n        UC22[Manage User Preferences]\r\n    end\r\n\r\n    %% Actor-Use Case Relationships\r\n    User --> UC1\r\n    User --> UC2\r\n    User --> UC4\r\n    User --> UC5\r\n    User --> UC6\r\n    User --> UC7\r\n    User --> UC8\r\n    User --> UC13\r\n    User --> UC14\r\n    User --> UC19\r\n    User --> UC20\r\n    User --> UC21\r\n    User --> UC22\r\n\r\n    Admin --> UC17\r\n    Admin --> UC18\r\n    Admin --> UC13\r\n    Admin --> UC14\r\n    Admin --> UC15\r\n    Admin --> UC16\r\n\r\n    MLSystem --> UC3\r\n    MLSystem --> UC9\r\n    MLSystem --> UC10\r\n    MLSystem --> UC11\r\n    MLSystem --> UC12\r\n\r\n    FileSystem --> UC1\r\n    FileSystem --> UC5\r\n    FileSystem --> UC15\r\n    FileSystem --> UC16\r\n\r\n    %% Use Case Relationships\r\n    UC1 --> UC3\r\n    UC1 --> UC7\r\n    UC3 --> UC4\r\n    UC3 --> UC9\r\n    UC3 --> UC10\r\n    UC3 --> UC11\r\n    UC3 --> UC12\r\n    UC4 --> UC5\r\n    UC4 --> UC6\r\n    UC5 --> UC15\r\n    UC6 --> UC5\r\n    UC7 --> UC2\r\n    UC8 --> UC2\r\n    UC13 --> UC1\r\n    UC14 --> UC5\r\n    UC15 --> UC16\r\n    UC18 --> UC9\r\n    UC18 --> UC10\r\n    UC19 --> UC1\r\n    UC20 --> UC8"
  },
  {
    "title": "Sequence Diagram",
    "description": "Shows the interaction between objects over time during scan and cleanup processes.",
    "mermaid": "sequenceDiagram\r\n    participant U as User\r\n    participant UI as React UI\r\n    participant API as FastAPI\r\n    participant FS as File Service\r\n    participant ML as ML Service\r\n    participant DB as Database\r\n    participant WS as WebSocket\r\n    participant DS as Duplicate Service\r\n\r\n    %% Scan Process\r\n    U->>UI: Enter directory path\r\n    U->>UI: Click \"Start Scan\"\r\n    UI->>API: POST /api/scan/start\r\n    API->>DB: Create scan session\r\n    DB-->>API: Session created\r\n    API-->>UI: Return session_id\r\n    UI->>WS: Connect to WebSocket\r\n    \r\n    %% Background Processing\r\n    API->>FS: Start directory scan\r\n    FS->>DB: Update status to \"running\"\r\n    loop For each file\r\n        FS->>FS: Check if file exists\r\n        alt File exists\r\n            FS->>DB: Update scan_session_id\r\n        else File is new\r\n            FS->>FS: Read file metadata\r\n            FS->>ML: Classify file\r\n            ML->>ML: Apply ML models\r\n            ML-->>FS: Return classification\r\n            FS->>DB: Store file data\r\n        end\r\n        FS->>WS: Send progress update (0-50%)\r\n        WS-->>UI: Real-time progress\r\n    end\r\n    \r\n    %% Duplicate Detection\r\n    FS->>WS: Send progress update (50% - starting duplicate detection)\r\n    WS-->>UI: Progress update\r\n    FS->>DS: Start duplicate detection\r\n    DS->>DB: Query files for session\r\n    loop For each file group by size\r\n        DS->>DS: Compare hashes\r\n        DS->>DS: Calculate similarity\r\n        alt Files are duplicates\r\n            DS->>DB: Create duplicate group\r\n        end\r\n    end\r\n    FS->>WS: Send progress update (75% - duplicate detection complete)\r\n    WS-->>UI: Progress update\r\n    FS->>DB: Update status to \"completed\"\r\n    FS->>WS: Send completion update (100%)\r\n    WS-->>UI: Scan completed\r\n    \r\n    %% Display Results\r\n    UI->>API: GET /api/scans/{scan_id}\r\n    API->>DS: Get duplicate groups (session_id)\r\n    DS->>DB: Query duplicate groups with session filter\r\n    DB-->>DS: Return session-specific groups\r\n    API->>DS: Get duplicate stats (session_id)\r\n    DS->>DB: Query stats with session filter\r\n    DB-->>DS: Return session-specific stats\r\n    DS-->>API: Return groups and stats\r\n    API-->>UI: Return scan data with duplicates and stats\r\n    UI->>UI: Display duplicate groups and statistics\r\n    \r\n    %% Cleanup Process\r\n    U->>UI: Select cleanup rules\r\n    U->>UI: Click \"Execute Cleanup\"\r\n    UI->>API: POST /api/cleanup/execute\r\n    API->>DS: Execute cleanup\r\n    DS->>DB: Get duplicate groups\r\n    DS->>FS: Backup files\r\n    DS->>FS: Delete duplicates\r\n    DS->>DB: Update database\r\n    DS-->>API: Cleanup completed\r\n    API-->>UI: Return success\r\n    UI->>UI: Refresh display\r\n    \r\n    %% Scan History Deletion\r\n    U->>UI: Click delete scan\r\n    UI->>UI: Show confirmation dialog\r\n    U->>UI: Confirm deletion\r\n    UI->>API: DELETE /api/scans/{scan_id}\r\n    API->>DB: Delete duplicates for session\r\n    API->>DB: Delete files for session\r\n    API->>DB: Delete scan session\r\n    DB-->>API: Deletion complete\r\n    API-->>UI: Return success\r\n    UI->>UI: Refresh scan history\r\n    \r\n    %% Bulk Scan Deletion\r\n    U->>UI: Enter bulk delete mode\r\n    U->>UI: Select multiple scans\r\n    U->>UI: Click bulk delete\r\n    UI->>UI: Show bulk confirmation dialog\r\n    U->>UI: Confirm bulk deletion\r\n    UI->>API: DELETE /api/scans/bulk\r\n    loop For each scan_id\r\n        API->>DB: Delete duplicates for session\r\n        API->>DB: Delete files for session\r\n        API->>DB: Delete scan session\r\n    end\r\n    DB-->>API: All deletions complete\r\n    API-->>UI: Return success with count\r\n    UI->>UI: Refresh scan history"
  },
  {
    "title": "State Diagram",
    "description": "Shows the different states of the system and transitions between them.",
    "mermaid": "stateDiagram-v2\r\n    [*] --> Idle\r\n    \r\n    Idle --> Scanning : Start Scan\r\n    Scanning --> Processing : Files Found\r\n    Processing --> Classifying : File Processed\r\n    Classifying --> Detecting : Classification Complete\r\n    Detecting --> Completed : Duplicates Found\r\n    Detecting --> Failed : Detection Error\r\n    Completed --> Idle : Scan Complete\r\n    Failed --> Idle : Error Handled\r\n    \r\n    Scanning --> Cancelled : User Cancel\r\n    Processing --> Cancelled : User Cancel\r\n    Classifying --> Cancelled : User Cancel\r\n    Detecting --> Cancelled : User Cancel\r\n    Cancelled --> Idle : Cleanup Complete\r\n    \r\n    Completed --> CleanupPreview : User Selects Cleanup\r\n    CleanupPreview --> CleanupExecuting : User Confirms\r\n    CleanupPreview --> Completed : User Cancels\r\n    CleanupExecuting --> CleanupCompleted : Cleanup Success\r\n    CleanupExecuting --> CleanupFailed : Cleanup Error\r\n    CleanupCompleted --> Idle : Process Complete\r\n    CleanupFailed --> Completed : Error Handled\r\n    \r\n    %% Sub-states for Processing\r\n    state Processing {\r\n        [*] --> ReadingFile\r\n        ReadingFile --> CalculatingHash : File Read\r\n        CalculatingHash --> ExtractingMetadata : Hash Calculated\r\n        ExtractingMetadata --> StoringData : Metadata Extracted\r\n        StoringData --> [*] : Data Stored\r\n    }\r\n    \r\n    %% Sub-states for Classifying\r\n    state Classifying {\r\n        [*] --> TextAnalysis\r\n        TextAnalysis --> ImageAnalysis : Text Processed\r\n        ImageAnalysis --> OCRProcessing : Image Processed\r\n        OCRProcessing --> [*] : OCR Complete\r\n    }\r\n    \r\n    %% Sub-states for Detecting\r\n    state Detecting {\r\n        [*] --> HashComparison\r\n        HashComparison --> SimilarityCalculation : Hashes Compared\r\n        SimilarityCalculation --> GroupCreation : Similarity Calculated\r\n        GroupCreation --> [*] : Groups Created\r\n    }\r\n    \r\n    %% Sub-states for Cleanup\r\n    state CleanupExecuting {\r\n        [*] --> BackupCreation\r\n        BackupCreation --> FileDeletion : Backup Complete\r\n        FileDeletion --> DatabaseUpdate : Files Deleted\r\n        DatabaseUpdate --> [*] : Database Updated\r\n    }"
  }
];

export default diagramDefinitions;